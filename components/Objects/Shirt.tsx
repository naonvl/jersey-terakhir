/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { useFrame, useLoader, useThree } from '@react-three/fiber'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import { TextureLoader } from 'three/src/loaders/TextureLoader'
import { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader'
import { GLTF } from 'three-stdlib'
import { MeshStandardMaterial } from 'three'
import { fabric } from 'fabric'

type GLTFResult = GLTF & {
  nodes: {
    M740158_mesh_zipper: THREE.Mesh
    M740158_mesh_band: THREE.Mesh
    M740158_mesh_out: THREE.Mesh
    M740158_mesh_in: THREE.Mesh
    M740158_mesh_zipp: THREE.Mesh
  }
  materials: {
    blinn9: THREE.MeshStandardMaterial
    blinn8: THREE.MeshStandardMaterial
    blinn10: THREE.MeshStandardMaterial
    blinn2: THREE.MeshStandardMaterial
    blinn4: THREE.MeshStandardMaterial
  }
}

let texture: THREE.CanvasTexture | null = null

function Shirt(props: JSX.IntrinsicElements['group']) {
  const { gl } = useThree()

  const canvasRef = useRef<fabric.Canvas | null>(null)

  useEffect(() => {
    canvasRef.current = initCanvas()

    texture = new THREE.CanvasTexture(canvasRef.current.getElement())

    texture.anisotropy = gl.capabilities.getMaxAnisotropy()
    texture.needsUpdate = true
    texture.flipY = false

    fabric.loadSVGFromURL('/textures/Jersey_COLOR.svg', (objects, options) => {
      const svgData = fabric.util.groupSVGElements(objects, {
        width: 1024,
        height: 1024,
        selectable: false,
        crossOrigin: 'anonymous',
      })

      canvasRef.current?.add(svgData)
      // canvasRef.current?.calcOffset()
      canvasRef.current?.sendToBack(svgData)
      canvasRef.current?.renderAll()
    })

    // cleanup
    return () => {
      canvasRef.current?.dispose()
      canvasRef.current = null
    }
  }, [gl.capabilities])

  // Textures
  // const texture = useTexture('/textures/Jersey_COLOR.svg')
  const [normalMap] = useLoader(TextureLoader, ['/textures/Jersey_NORMAL.png'])

  const [hovered, setHovered] = useState(false)
  const [clicked, setClicked] = useState(false)
  const groupRef = useRef<THREE.Group>(null)
  const { nodes, materials } = useGLTF('/cycling-jersey.drc.glb') as GLTFResult

  useFrame((state) => {
    if (texture) {
      texture.needsUpdate = true
    }

    state.gl.domElement.style.cursor = hovered ? 'grab' : 'auto'
    state.gl.domElement.style.cursor = clicked ? 'grabbing' : 'grab'
  })

  const initCanvas = () =>
    new fabric.Canvas('canvas', {
      preserveObjectStacking: true,
      selection: false,
    })

  return (
    <group
      ref={groupRef}
      dispose={null}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
      onPointerDown={() => setClicked(true)}
      onPointerUp={() => setClicked(false)}
      {...props}
    >
      <mesh
        geometry={nodes.M740158_mesh_zipper.geometry}
        material={materials.blinn9}
        scale={100}
      />
      <mesh
        geometry={nodes.M740158_mesh_band.geometry}
        material={materials.blinn8}
        scale={100}
      />
      <mesh
        geometry={nodes.M740158_mesh_out.geometry}
        material={materials.blinn10}
        scale={100}
      >
        <meshStandardMaterial
          attach="material"
          normalMap={normalMap}
          normalMap-flipY={false}
          map={texture}
        >
          <canvasTexture attach="map" image={canvasRef} />
        </meshStandardMaterial>
      </mesh>
      <mesh
        geometry={nodes.M740158_mesh_in.geometry}
        material={materials.blinn2}
        scale={100}
      />
      <mesh
        geometry={nodes.M740158_mesh_zipp.geometry}
        material={materials.blinn4}
        scale={100}
      />
    </group>
  )
}

useGLTF.preload('/cycling-jersey.drc.glb')

export default Shirt
